/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface ReaderInterface extends ethers.utils.Interface {
  functions: {
    'controller()': FunctionFragment
    'getDelta(uint256,uint256)': FunctionFragment
    'getUtilizationRatio(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'controller', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getDelta',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getUtilizationRatio',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'controller', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDelta', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getUtilizationRatio',
    data: BytesLike
  ): Result

  events: {}
}

export class Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ReaderInterface

  functions: {
    controller(overrides?: CallOverrides): Promise<[string]>

    getDelta(
      _pairId: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _delta: BigNumber }>

    getUtilizationRatio(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sqrtAsset: BigNumber
        stableAsset: BigNumber
        underlyingAsset: BigNumber
      }
    >
  }

  controller(overrides?: CallOverrides): Promise<string>

  getDelta(
    _pairId: BigNumberish,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getUtilizationRatio(
    _pairId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      sqrtAsset: BigNumber
      stableAsset: BigNumber
      underlyingAsset: BigNumber
    }
  >

  callStatic: {
    controller(overrides?: CallOverrides): Promise<string>

    getDelta(
      _pairId: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUtilizationRatio(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sqrtAsset: BigNumber
        stableAsset: BigNumber
        underlyingAsset: BigNumber
      }
    >
  }

  filters: {}

  estimateGas: {
    controller(overrides?: CallOverrides): Promise<BigNumber>

    getDelta(
      _pairId: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUtilizationRatio(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getDelta(
      _pairId: BigNumberish,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUtilizationRatio(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}

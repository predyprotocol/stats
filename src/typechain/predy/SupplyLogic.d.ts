/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface SupplyLogicInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'TokenSupplied(address,uint256,bool,uint256)': EventFragment
    'TokenWithdrawn(address,uint256,bool,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'TokenSupplied'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenWithdrawn'): EventFragment
}

export type TokenSuppliedEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber] & {
    account: string
    pairId: BigNumber
    isStable: boolean
    suppliedAmount: BigNumber
  }
>

export type TokenWithdrawnEvent = TypedEvent<
  [string, BigNumber, boolean, BigNumber] & {
    account: string
    pairId: BigNumber
    isStable: boolean
    finalWithdrawnAmount: BigNumber
  }
>

export class SupplyLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SupplyLogicInterface

  functions: {}

  callStatic: {}

  filters: {
    'TokenSupplied(address,uint256,bool,uint256)'(
      account?: null,
      pairId?: null,
      isStable?: null,
      suppliedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        account: string
        pairId: BigNumber
        isStable: boolean
        suppliedAmount: BigNumber
      }
    >

    TokenSupplied(
      account?: null,
      pairId?: null,
      isStable?: null,
      suppliedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        account: string
        pairId: BigNumber
        isStable: boolean
        suppliedAmount: BigNumber
      }
    >

    'TokenWithdrawn(address,uint256,bool,uint256)'(
      account?: null,
      pairId?: null,
      isStable?: null,
      finalWithdrawnAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        account: string
        pairId: BigNumber
        isStable: boolean
        finalWithdrawnAmount: BigNumber
      }
    >

    TokenWithdrawn(
      account?: null,
      pairId?: null,
      isStable?: null,
      finalWithdrawnAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean, BigNumber],
      {
        account: string
        pairId: BigNumber
        isStable: boolean
        finalWithdrawnAmount: BigNumber
      }
    >
  }

  estimateGas: {}

  populateTransaction: {}
}

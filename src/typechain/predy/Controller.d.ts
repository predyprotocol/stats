/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    'allowedUniswapPools(address)': FunctionFragment
    'closeIsolatedVault(uint256,uint256,(uint256,uint256,uint256))': FunctionFragment
    'getAsset(uint256)': FunctionFragment
    'getAssetGroup()': FunctionFragment
    'getLatestAssetStatus(uint256)': FunctionFragment
    'getSqrtIndexPrice(uint256)': FunctionFragment
    'getSqrtPrice(uint256)': FunctionFragment
    'getUtilizationRatio(uint256)': FunctionFragment
    'getVault(uint256)': FunctionFragment
    'getVaultStatus(uint256)': FunctionFragment
    'getVaultStatusWithAddress()': FunctionFragment
    'initialize(address,(uint256,uint256,uint256,uint256),tuple[])': FunctionFragment
    'liquidationCall(uint256,uint256)': FunctionFragment
    'openIsolatedVault(uint256,uint256,(int256,int256,uint256,uint256,uint256,bool,bytes))': FunctionFragment
    'operator()': FunctionFragment
    'reallocate(uint256)': FunctionFragment
    'setOperator(address)': FunctionFragment
    'settleUserBalance(uint256)': FunctionFragment
    'supplyToken(uint256,uint256)': FunctionFragment
    'tradePerp(uint256,uint256,(int256,int256,uint256,uint256,uint256,bool,bytes))': FunctionFragment
    'uniswapV3MintCallback(uint256,uint256,bytes)': FunctionFragment
    'uniswapV3SwapCallback(int256,int256,bytes)': FunctionFragment
    'updateAssetRiskParams(uint256,(uint256,int24,int24))': FunctionFragment
    'updateIRMParams(uint256,(uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256))': FunctionFragment
    'updateMargin(int256)': FunctionFragment
    'vaultCount()': FunctionFragment
    'withdrawProtocolRevenue(uint256,uint256)': FunctionFragment
    'withdrawToken(uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allowedUniswapPools',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'closeIsolatedVault',
    values: [
      BigNumberish,
      BigNumberish,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getAsset',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getAssetGroup',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getLatestAssetStatus',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtIndexPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getUtilizationRatio',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVault',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVaultStatus',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVaultStatusWithAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      string,
      {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      {
        uniswapPool: string
        assetRiskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
        squartIRMParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }[]
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'liquidationCall',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'openIsolatedVault',
    values: [
      BigNumberish,
      BigNumberish,
      {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      }
    ]
  ): string
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'reallocate',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setOperator', values: [string]): string
  encodeFunctionData(
    functionFragment: 'settleUserBalance',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'supplyToken',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'tradePerp',
    values: [
      BigNumberish,
      BigNumberish,
      {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'uniswapV3MintCallback',
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'uniswapV3SwapCallback',
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(
    functionFragment: 'updateAssetRiskParams',
    values: [
      BigNumberish,
      {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updateIRMParams',
    values: [
      BigNumberish,
      {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'vaultCount', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'withdrawProtocolRevenue',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'allowedUniswapPools',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'closeIsolatedVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAssetGroup',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getLatestAssetStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtIndexPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getUtilizationRatio',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getVaultStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getVaultStatusWithAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'liquidationCall',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'openIsolatedVault',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reallocate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'settleUserBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'supplyToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tradePerp', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'uniswapV3MintCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'uniswapV3SwapCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateAssetRiskParams',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateIRMParams',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'vaultCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawProtocolRevenue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike
  ): Result

  events: {
    'AssetGroupInitialized(uint256,uint256[])': EventFragment
    'AssetRiskParamsUpdated(uint256,tuple)': EventFragment
    'IRMParamsUpdated(uint256,tuple,tuple)': EventFragment
    'Initialized(uint8)': EventFragment
    'OperatorUpdated(address)': EventFragment
    'PairAdded(uint256,address)': EventFragment
    'ProtocolRevenueWithdrawn(uint256,uint256)': EventFragment
    'VaultCreated(uint256,address,bool)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AssetGroupInitialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'AssetRiskParamsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'IRMParamsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OperatorUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PairAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ProtocolRevenueWithdrawn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VaultCreated'): EventFragment
}

export type AssetGroupInitializedEvent = TypedEvent<
  [BigNumber, BigNumber[]] & { stableAssetId: BigNumber; assetIds: BigNumber[] }
>

export type AssetRiskParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, number, number] & {
      riskRatio: BigNumber
      rangeSize: number
      rebalanceThreshold: number
    }
  ] & {
    assetId: BigNumber
    riskParams: [BigNumber, number, number] & {
      riskRatio: BigNumber
      rangeSize: number
      rebalanceThreshold: number
    }
  }
>

export type IRMParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    },
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
  ] & {
    assetId: BigNumber
    irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
    squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
  }
>

export type InitializedEvent = TypedEvent<[number] & { version: number }>

export type OperatorUpdatedEvent = TypedEvent<[string] & { operator: string }>

export type PairAddedEvent = TypedEvent<
  [BigNumber, string] & { assetId: BigNumber; _uniswapPool: string }
>

export type ProtocolRevenueWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    assetId: BigNumber
    withdrawnProtocolFee: BigNumber
  }
>

export type VaultCreatedEvent = TypedEvent<
  [BigNumber, string, boolean] & {
    vaultId: BigNumber
    owner: string
    isMainVault: boolean
  }
>

export class Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ControllerInterface

  functions: {
    allowedUniswapPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    closeIsolatedVault(
      _isolatedVaultId: BigNumberish,
      _assetId: BigNumberish,
      _closeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          [BigNumber, number, number] & {
            riskRatio: BigNumber
            rangeSize: number
            rebalanceThreshold: number
          },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalCompoundBorrowed: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            debtScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          },
          [
            string,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            uniswapPool: string
            tickLower: number
            tickUpper: number
            totalAmount: BigNumber
            borrowedAmount: BigNumber
            supplyPremiumGrowth: BigNumber
            borrowPremiumGrowth: BigNumber
            fee0Growth: BigNumber
            fee1Growth: BigNumber
            rebalancePositionUnderlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalancePositionStable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceFeeGrowthUnderlying: BigNumber
            rebalanceFeeGrowthStable: BigNumber
          },
          boolean,
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          id: BigNumber
          token: string
          supplyTokenAddress: string
          riskParams: [BigNumber, number, number] & {
            riskRatio: BigNumber
            rangeSize: number
            rebalanceThreshold: number
          }
          tokenStatus: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalCompoundBorrowed: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            debtScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          }
          sqrtAssetStatus: [
            string,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            uniswapPool: string
            tickLower: number
            tickUpper: number
            totalAmount: BigNumber
            borrowedAmount: BigNumber
            supplyPremiumGrowth: BigNumber
            borrowPremiumGrowth: BigNumber
            fee0Growth: BigNumber
            fee1Growth: BigNumber
            rebalancePositionUnderlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalancePositionStable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceFeeGrowthUnderlying: BigNumber
            rebalanceFeeGrowthStable: BigNumber
          }
          isMarginZero: boolean
          irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
          squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
          lastUpdateTimestamp: BigNumber
          accumulatedProtocolRevenue: BigNumber
        }
      ]
    >

    getAssetGroup(overrides?: CallOverrides): Promise<
      [
        [BigNumber, BigNumber[]] & {
          stableAssetId: BigNumber
          assetIds: BigNumber[]
        }
      ]
    >

    getLatestAssetStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getSqrtIndexPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getSqrtPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getUtilizationRatio(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          BigNumber,
          ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
          ] & {
            assetId: BigNumber
            perpTrade: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
          })[]
        ] & {
          id: BigNumber
          owner: string
          margin: BigNumber
          openPositions: ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
          ] & {
            assetId: BigNumber
            perpTrade: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
          })[]
        }
      ]
    >

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getVaultStatusWithAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    initialize(
      _stableAssetAddress: string,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _addAssetParams: {
        uniswapPool: string
        assetRiskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
        squartIRMParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    liquidationCall(
      _vaultId: BigNumberish,
      _closeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    openIsolatedVault(
      _depositAmount: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    operator(overrides?: CallOverrides): Promise<[string]>

    reallocate(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    settleUserBalance(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    supplyToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    tradePerp(
      _vaultId: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    uniswapV3MintCallback(
      amount0: BigNumberish,
      amount1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateAssetRiskParams(
      _assetId: BigNumberish,
      _riskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateIRMParams(
      _assetId: BigNumberish,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _squartIRMParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateMargin(
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    vaultCount(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawProtocolRevenue(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  allowedUniswapPools(arg0: string, overrides?: CallOverrides): Promise<boolean>

  closeIsolatedVault(
    _isolatedVaultId: BigNumberish,
    _assetId: BigNumberish,
    _closeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getAsset(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      [BigNumber, number, number] & {
        riskRatio: BigNumber
        rangeSize: number
        rebalanceThreshold: number
      },
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCompoundDeposited: BigNumber
        totalCompoundBorrowed: BigNumber
        totalNormalDeposited: BigNumber
        totalNormalBorrowed: BigNumber
        assetScaler: BigNumber
        debtScaler: BigNumber
        assetGrowth: BigNumber
        debtGrowth: BigNumber
      },
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        uniswapPool: string
        tickLower: number
        tickUpper: number
        totalAmount: BigNumber
        borrowedAmount: BigNumber
        supplyPremiumGrowth: BigNumber
        borrowPremiumGrowth: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        rebalancePositionUnderlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalancePositionStable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalanceFeeGrowthUnderlying: BigNumber
        rebalanceFeeGrowthStable: BigNumber
      },
      boolean,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber
        kinkRate: BigNumber
        slope1: BigNumber
        slope2: BigNumber
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber
        kinkRate: BigNumber
        slope1: BigNumber
        slope2: BigNumber
      },
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber
      token: string
      supplyTokenAddress: string
      riskParams: [BigNumber, number, number] & {
        riskRatio: BigNumber
        rangeSize: number
        rebalanceThreshold: number
      }
      tokenStatus: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalCompoundDeposited: BigNumber
        totalCompoundBorrowed: BigNumber
        totalNormalDeposited: BigNumber
        totalNormalBorrowed: BigNumber
        assetScaler: BigNumber
        debtScaler: BigNumber
        assetGrowth: BigNumber
        debtGrowth: BigNumber
      }
      sqrtAssetStatus: [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        uniswapPool: string
        tickLower: number
        tickUpper: number
        totalAmount: BigNumber
        borrowedAmount: BigNumber
        supplyPremiumGrowth: BigNumber
        borrowPremiumGrowth: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        rebalancePositionUnderlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalancePositionStable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalanceFeeGrowthUnderlying: BigNumber
        rebalanceFeeGrowthStable: BigNumber
      }
      isMarginZero: boolean
      irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber
        kinkRate: BigNumber
        slope1: BigNumber
        slope2: BigNumber
      }
      squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseRate: BigNumber
        kinkRate: BigNumber
        slope1: BigNumber
        slope2: BigNumber
      }
      lastUpdateTimestamp: BigNumber
      accumulatedProtocolRevenue: BigNumber
    }
  >

  getAssetGroup(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber[]] & {
      stableAssetId: BigNumber
      assetIds: BigNumber[]
    }
  >

  getLatestAssetStatus(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getSqrtIndexPrice(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getSqrtPrice(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getUtilizationRatio(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>

  getVault(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      ([
        BigNumber,
        [
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          rebalanceEntryFeeUnderlying: BigNumber
          rebalanceEntryFeeStable: BigNumber
        }
      ] & {
        assetId: BigNumber
        perpTrade: [
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          rebalanceEntryFeeUnderlying: BigNumber
          rebalanceEntryFeeStable: BigNumber
        }
      })[]
    ] & {
      id: BigNumber
      owner: string
      margin: BigNumber
      openPositions: ([
        BigNumber,
        [
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          rebalanceEntryFeeUnderlying: BigNumber
          rebalanceEntryFeeStable: BigNumber
        }
      ] & {
        assetId: BigNumber
        perpTrade: [
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          number,
          number,
          BigNumber,
          BigNumber
        ] & {
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
            entryPremium: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          rebalanceEntryFeeUnderlying: BigNumber
          rebalanceEntryFeeStable: BigNumber
        }
      })[]
    }
  >

  getVaultStatus(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getVaultStatusWithAddress(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  initialize(
    _stableAssetAddress: string,
    _irmParams: {
      baseRate: BigNumberish
      kinkRate: BigNumberish
      slope1: BigNumberish
      slope2: BigNumberish
    },
    _addAssetParams: {
      uniswapPool: string
      assetRiskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      }
      irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      }
      squartIRMParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      }
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  liquidationCall(
    _vaultId: BigNumberish,
    _closeRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  openIsolatedVault(
    _depositAmount: BigNumberish,
    _assetId: BigNumberish,
    _tradeParams: {
      tradeAmount: BigNumberish
      tradeAmountSqrt: BigNumberish
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
      enableCallback: boolean
      data: BytesLike
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  operator(overrides?: CallOverrides): Promise<string>

  reallocate(
    _assetId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOperator(
    _newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  settleUserBalance(
    _vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  supplyToken(
    _assetId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  tradePerp(
    _vaultId: BigNumberish,
    _assetId: BigNumberish,
    _tradeParams: {
      tradeAmount: BigNumberish
      tradeAmountSqrt: BigNumberish
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
      enableCallback: boolean
      data: BytesLike
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  uniswapV3MintCallback(
    amount0: BigNumberish,
    amount1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  uniswapV3SwapCallback(
    amount0Delta: BigNumberish,
    amount1Delta: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateAssetRiskParams(
    _assetId: BigNumberish,
    _riskParams: {
      riskRatio: BigNumberish
      rangeSize: BigNumberish
      rebalanceThreshold: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateIRMParams(
    _assetId: BigNumberish,
    _irmParams: {
      baseRate: BigNumberish
      kinkRate: BigNumberish
      slope1: BigNumberish
      slope2: BigNumberish
    },
    _squartIRMParams: {
      baseRate: BigNumberish
      kinkRate: BigNumberish
      slope1: BigNumberish
      slope2: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateMargin(
    _marginAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  vaultCount(overrides?: CallOverrides): Promise<BigNumber>

  withdrawProtocolRevenue(
    _assetId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawToken(
    _assetId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    allowedUniswapPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    closeIsolatedVault(
      _isolatedVaultId: BigNumberish,
      _assetId: BigNumberish,
      _closeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        payoff: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        }
        fee: BigNumber
        minDeposit: BigNumber
      }
    >

    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalCompoundBorrowed: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          debtScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          supplyPremiumGrowth: BigNumber
          borrowPremiumGrowth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        },
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber
        token: string
        supplyTokenAddress: string
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalCompoundBorrowed: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          debtScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        sqrtAssetStatus: [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          supplyPremiumGrowth: BigNumber
          borrowPremiumGrowth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        }
        isMarginZero: boolean
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        lastUpdateTimestamp: BigNumber
        accumulatedProtocolRevenue: BigNumber
      }
    >

    getAssetGroup(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber[]] & {
        stableAssetId: BigNumber
        assetIds: BigNumber[]
      }
    >

    getLatestAssetStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        },
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalCompoundBorrowed: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          debtScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          supplyPremiumGrowth: BigNumber
          borrowPremiumGrowth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        },
        boolean,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber
        token: string
        supplyTokenAddress: string
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalCompoundBorrowed: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          debtScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        sqrtAssetStatus: [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          supplyPremiumGrowth: BigNumber
          borrowPremiumGrowth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        }
        isMarginZero: boolean
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        lastUpdateTimestamp: BigNumber
        accumulatedProtocolRevenue: BigNumber
      }
    >

    getSqrtIndexPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUtilizationRatio(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        ([
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
        ] & {
          assetId: BigNumber
          perpTrade: [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
        })[]
      ] & {
        id: BigNumber
        owner: string
        margin: BigNumber
        openPositions: ([
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
        ] & {
          assetId: BigNumber
          perpTrade: [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
        })[]
      }
    >

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          assetId: BigNumber
          position: [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
          delta: BigNumber
          unrealizedFee: BigNumber
        })[]
      ] & {
        vaultId: BigNumber
        isMainVault: boolean
        vaultValue: BigNumber
        margin: BigNumber
        positionValue: BigNumber
        minDeposit: BigNumber
        subVaults: ([
          BigNumber,
          [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          assetId: BigNumber
          position: [
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            number,
            number,
            BigNumber,
            BigNumber
          ] & {
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
              entryPremium: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            rebalanceEntryFeeUnderlying: BigNumber
            rebalanceEntryFeeStable: BigNumber
          }
          delta: BigNumber
          unrealizedFee: BigNumber
        })[]
      }
    >

    getVaultStatusWithAddress(overrides?: CallOverrides): Promise<
      [
        [
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            assetId: BigNumber
            position: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
            delta: BigNumber
            unrealizedFee: BigNumber
          })[]
        ] & {
          vaultId: BigNumber
          isMainVault: boolean
          vaultValue: BigNumber
          margin: BigNumber
          positionValue: BigNumber
          minDeposit: BigNumber
          subVaults: ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            assetId: BigNumber
            position: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
            delta: BigNumber
            unrealizedFee: BigNumber
          })[]
        },
        ([
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            assetId: BigNumber
            position: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
            delta: BigNumber
            unrealizedFee: BigNumber
          })[]
        ] & {
          vaultId: BigNumber
          isMainVault: boolean
          vaultValue: BigNumber
          margin: BigNumber
          positionValue: BigNumber
          minDeposit: BigNumber
          subVaults: ([
            BigNumber,
            [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            assetId: BigNumber
            position: [
              [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              },
              [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              },
              number,
              number,
              BigNumber,
              BigNumber
            ] & {
              perp: [BigNumber, BigNumber] & {
                amount: BigNumber
                entryValue: BigNumber
              }
              sqrtPerp: [
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber,
                BigNumber
              ] & {
                amount: BigNumber
                entryValue: BigNumber
                stableRebalanceEntryValue: BigNumber
                underlyingRebalanceEntryValue: BigNumber
                entryTradeFee0: BigNumber
                entryTradeFee1: BigNumber
                entryPremium: BigNumber
              }
              underlying: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              stable: [BigNumber, BigNumber] & {
                positionAmount: BigNumber
                lastFeeGrowth: BigNumber
              }
              rebalanceLastTickLower: number
              rebalanceLastTickUpper: number
              rebalanceEntryFeeUnderlying: BigNumber
              rebalanceEntryFeeStable: BigNumber
            }
            delta: BigNumber
            unrealizedFee: BigNumber
          })[]
        })[]
      ]
    >

    initialize(
      _stableAssetAddress: string,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _addAssetParams: {
        uniswapPool: string
        assetRiskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
        squartIRMParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }[],
      overrides?: CallOverrides
    ): Promise<void>

    liquidationCall(
      _vaultId: BigNumberish,
      _closeRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    openIsolatedVault(
      _depositAmount: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            perpEntryUpdate: BigNumber
            sqrtEntryUpdate: BigNumber
            sqrtRebalanceEntryUpdateUnderlying: BigNumber
            sqrtRebalanceEntryUpdateStable: BigNumber
            perpPayoff: BigNumber
            sqrtPayoff: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          payoff: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            perpEntryUpdate: BigNumber
            sqrtEntryUpdate: BigNumber
            sqrtRebalanceEntryUpdateUnderlying: BigNumber
            sqrtRebalanceEntryUpdateStable: BigNumber
            perpPayoff: BigNumber
            sqrtPayoff: BigNumber
          }
          fee: BigNumber
          minDeposit: BigNumber
        }
      ] & {
        isolatedVaultId: BigNumber
        tradeResult: [
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            perpEntryUpdate: BigNumber
            sqrtEntryUpdate: BigNumber
            sqrtRebalanceEntryUpdateUnderlying: BigNumber
            sqrtRebalanceEntryUpdateStable: BigNumber
            perpPayoff: BigNumber
            sqrtPayoff: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          payoff: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            perpEntryUpdate: BigNumber
            sqrtEntryUpdate: BigNumber
            sqrtRebalanceEntryUpdateUnderlying: BigNumber
            sqrtRebalanceEntryUpdateStable: BigNumber
            perpPayoff: BigNumber
            sqrtPayoff: BigNumber
          }
          fee: BigNumber
          minDeposit: BigNumber
        }
      }
    >

    operator(overrides?: CallOverrides): Promise<string>

    reallocate(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>

    setOperator(_newOperator: string, overrides?: CallOverrides): Promise<void>

    settleUserBalance(
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    supplyToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    tradePerp(
      _vaultId: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        payoff: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        }
        fee: BigNumber
        minDeposit: BigNumber
      }
    >

    uniswapV3MintCallback(
      amount0: BigNumberish,
      amount1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    updateAssetRiskParams(
      _assetId: BigNumberish,
      _riskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    updateIRMParams(
      _assetId: BigNumberish,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _squartIRMParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    updateMargin(
      _marginAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>

    withdrawProtocolRevenue(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdrawToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        finalBurnAmount: BigNumber
        finalWithdrawAmount: BigNumber
      }
    >
  }

  filters: {
    'AssetGroupInitialized(uint256,uint256[])'(
      stableAssetId?: null,
      assetIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { stableAssetId: BigNumber; assetIds: BigNumber[] }
    >

    AssetGroupInitialized(
      stableAssetId?: null,
      assetIds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber[]],
      { stableAssetId: BigNumber; assetIds: BigNumber[] }
    >

    'AssetRiskParamsUpdated(uint256,tuple)'(
      assetId?: null,
      riskParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      ],
      {
        assetId: BigNumber
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      }
    >

    AssetRiskParamsUpdated(
      assetId?: null,
      riskParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      ],
      {
        assetId: BigNumber
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      }
    >

    'IRMParamsUpdated(uint256,tuple,tuple)'(
      assetId?: null,
      irmParams?: null,
      squartIRMParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ],
      {
        assetId: BigNumber
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
    >

    IRMParamsUpdated(
      assetId?: null,
      irmParams?: null,
      squartIRMParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ],
      {
        assetId: BigNumber
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        squartIRMParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
    >

    'Initialized(uint8)'(
      version?: null
    ): TypedEventFilter<[number], { version: number }>

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>

    'OperatorUpdated(address)'(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>

    OperatorUpdated(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>

    'PairAdded(uint256,address)'(
      assetId?: null,
      _uniswapPool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; _uniswapPool: string }
    >

    PairAdded(
      assetId?: null,
      _uniswapPool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { assetId: BigNumber; _uniswapPool: string }
    >

    'ProtocolRevenueWithdrawn(uint256,uint256)'(
      assetId?: null,
      withdrawnProtocolFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { assetId: BigNumber; withdrawnProtocolFee: BigNumber }
    >

    ProtocolRevenueWithdrawn(
      assetId?: null,
      withdrawnProtocolFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { assetId: BigNumber; withdrawnProtocolFee: BigNumber }
    >

    'VaultCreated(uint256,address,bool)'(
      vaultId?: null,
      owner?: null,
      isMainVault?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { vaultId: BigNumber; owner: string; isMainVault: boolean }
    >

    VaultCreated(
      vaultId?: null,
      owner?: null,
      isMainVault?: null
    ): TypedEventFilter<
      [BigNumber, string, boolean],
      { vaultId: BigNumber; owner: string; isMainVault: boolean }
    >
  }

  estimateGas: {
    allowedUniswapPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    closeIsolatedVault(
      _isolatedVaultId: BigNumberish,
      _assetId: BigNumberish,
      _closeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getAsset(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getAssetGroup(overrides?: CallOverrides): Promise<BigNumber>

    getLatestAssetStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getSqrtIndexPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getUtilizationRatio(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVault(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getVaultStatusWithAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    initialize(
      _stableAssetAddress: string,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _addAssetParams: {
        uniswapPool: string
        assetRiskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
        squartIRMParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    liquidationCall(
      _vaultId: BigNumberish,
      _closeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    openIsolatedVault(
      _depositAmount: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    operator(overrides?: CallOverrides): Promise<BigNumber>

    reallocate(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    settleUserBalance(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    supplyToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    tradePerp(
      _vaultId: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    uniswapV3MintCallback(
      amount0: BigNumberish,
      amount1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateAssetRiskParams(
      _assetId: BigNumberish,
      _riskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateIRMParams(
      _assetId: BigNumberish,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _squartIRMParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateMargin(
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    vaultCount(overrides?: CallOverrides): Promise<BigNumber>

    withdrawProtocolRevenue(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    allowedUniswapPools(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    closeIsolatedVault(
      _isolatedVaultId: BigNumberish,
      _assetId: BigNumberish,
      _closeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAssetGroup(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getLatestAssetStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getSqrtIndexPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSqrtPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getUtilizationRatio(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVaultStatus(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getVaultStatusWithAddress(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    initialize(
      _stableAssetAddress: string,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _addAssetParams: {
        uniswapPool: string
        assetRiskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
        squartIRMParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    liquidationCall(
      _vaultId: BigNumberish,
      _closeRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    openIsolatedVault(
      _depositAmount: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    reallocate(
      _assetId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    settleUserBalance(
      _vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    supplyToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    tradePerp(
      _vaultId: BigNumberish,
      _assetId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    uniswapV3MintCallback(
      amount0: BigNumberish,
      amount1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    uniswapV3SwapCallback(
      amount0Delta: BigNumberish,
      amount1Delta: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateAssetRiskParams(
      _assetId: BigNumberish,
      _riskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateIRMParams(
      _assetId: BigNumberish,
      _irmParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      _squartIRMParams: {
        baseRate: BigNumberish
        kinkRate: BigNumberish
        slope1: BigNumberish
        slope2: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateMargin(
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    vaultCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawProtocolRevenue(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawToken(
      _assetId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
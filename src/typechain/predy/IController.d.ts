/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface IControllerInterface extends ethers.utils.Interface {
  functions: {
    'getAsset(uint256)': FunctionFragment
    'getPairGroup(uint256)': FunctionFragment
    'getSqrtPrice(uint256)': FunctionFragment
    'getVault(uint256)': FunctionFragment
    'getVaultStatus(uint256)': FunctionFragment
    'setAutoTransfer(uint256,bool)': FunctionFragment
    'tradePerp(uint256,uint64,(int256,int256,uint256,uint256,uint256,bool,bytes))': FunctionFragment
    'updateMargin(uint64,int256)': FunctionFragment
    'updateMarginOfIsolated(uint64,uint256,int256,bool)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'getAsset',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPairGroup',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSqrtPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVault',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getVaultStatus',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setAutoTransfer',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'tradePerp',
    values: [
      BigNumberish,
      BigNumberish,
      {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updateMargin',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'updateMarginOfIsolated',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string

  decodeFunctionResult(functionFragment: 'getAsset', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getPairGroup',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSqrtPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getVault', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getVaultStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setAutoTransfer',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'tradePerp', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateMargin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateMarginOfIsolated',
    data: BytesLike
  ): Result

  events: {}
}

export class IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: IControllerInterface

  functions: {
    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          [
            string,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          ] & {
            token: string
            supplyTokenAddress: string
            tokenStatus: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            }
            irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          },
          [
            string,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          ] & {
            token: string
            supplyTokenAddress: string
            tokenStatus: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            }
            irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          },
          [BigNumber, number, number] & {
            riskRatio: BigNumber
            rangeSize: number
            rebalanceThreshold: number
          },
          [
            string,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            uniswapPool: string
            tickLower: number
            tickUpper: number
            numRebalance: BigNumber
            totalAmount: BigNumber
            borrowedAmount: BigNumber
            lastRebalanceTotalSquartAmount: BigNumber
            lastFee0Growth: BigNumber
            lastFee1Growth: BigNumber
            borrowPremium0Growth: BigNumber
            borrowPremium1Growth: BigNumber
            fee0Growth: BigNumber
            fee1Growth: BigNumber
            rebalancePositionUnderlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalancePositionStable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceFeeGrowthUnderlying: BigNumber
            rebalanceFeeGrowthStable: BigNumber
          },
          boolean,
          boolean,
          BigNumber
        ] & {
          id: BigNumber
          pairGroupId: BigNumber
          stablePool: [
            string,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          ] & {
            token: string
            supplyTokenAddress: string
            tokenStatus: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            }
            irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          }
          underlyingPool: [
            string,
            string,
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            },
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          ] & {
            token: string
            supplyTokenAddress: string
            tokenStatus: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              totalCompoundDeposited: BigNumber
              totalNormalDeposited: BigNumber
              totalNormalBorrowed: BigNumber
              assetScaler: BigNumber
              assetGrowth: BigNumber
              debtGrowth: BigNumber
            }
            irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              baseRate: BigNumber
              kinkRate: BigNumber
              slope1: BigNumber
              slope2: BigNumber
            }
          }
          riskParams: [BigNumber, number, number] & {
            riskRatio: BigNumber
            rangeSize: number
            rebalanceThreshold: number
          }
          sqrtAssetStatus: [
            string,
            number,
            number,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            BigNumber,
            BigNumber
          ] & {
            uniswapPool: string
            tickLower: number
            tickUpper: number
            numRebalance: BigNumber
            totalAmount: BigNumber
            borrowedAmount: BigNumber
            lastRebalanceTotalSquartAmount: BigNumber
            lastFee0Growth: BigNumber
            lastFee1Growth: BigNumber
            borrowPremium0Growth: BigNumber
            borrowPremium1Growth: BigNumber
            fee0Growth: BigNumber
            fee1Growth: BigNumber
            rebalancePositionUnderlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalancePositionStable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            rebalanceFeeGrowthUnderlying: BigNumber
            rebalanceFeeGrowthStable: BigNumber
          }
          isMarginZero: boolean
          isIsolatedMode: boolean
          lastUpdateTimestamp: BigNumber
        }
      ]
    >

    getPairGroup(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, number] & {
          id: BigNumber
          stableTokenAddress: string
          marginRoundedDecimal: number
        }
      ]
    >

    getSqrtPrice(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          boolean,
          ([
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          })[]
        ] & {
          id: BigNumber
          pairGroupId: BigNumber
          owner: string
          margin: BigNumber
          autoTransferDisabled: boolean
          openPositions: ([
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          })[]
        }
      ]
    >

    getVaultStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setAutoTransfer(
      _isolatedVaultId: BigNumberish,
      _autoTransferDisabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    tradePerp(
      _vaultId: BigNumberish,
      _pairId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateMargin(
      _pairGroupId: BigNumberish,
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateMarginOfIsolated(
      _pairGroupId: BigNumberish,
      _isolatedVaultId: BigNumberish,
      _marginAmount: BigNumberish,
      _moveFromMainVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  getAsset(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ] & {
        token: string
        supplyTokenAddress: string
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      },
      [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ] & {
        token: string
        supplyTokenAddress: string
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      },
      [BigNumber, number, number] & {
        riskRatio: BigNumber
        rangeSize: number
        rebalanceThreshold: number
      },
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        uniswapPool: string
        tickLower: number
        tickUpper: number
        numRebalance: BigNumber
        totalAmount: BigNumber
        borrowedAmount: BigNumber
        lastRebalanceTotalSquartAmount: BigNumber
        lastFee0Growth: BigNumber
        lastFee1Growth: BigNumber
        borrowPremium0Growth: BigNumber
        borrowPremium1Growth: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        rebalancePositionUnderlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalancePositionStable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalanceFeeGrowthUnderlying: BigNumber
        rebalanceFeeGrowthStable: BigNumber
      },
      boolean,
      boolean,
      BigNumber
    ] & {
      id: BigNumber
      pairGroupId: BigNumber
      stablePool: [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ] & {
        token: string
        supplyTokenAddress: string
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
      underlyingPool: [
        string,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ] & {
        token: string
        supplyTokenAddress: string
        tokenStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
      riskParams: [BigNumber, number, number] & {
        riskRatio: BigNumber
        rangeSize: number
        rebalanceThreshold: number
      }
      sqrtAssetStatus: [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        uniswapPool: string
        tickLower: number
        tickUpper: number
        numRebalance: BigNumber
        totalAmount: BigNumber
        borrowedAmount: BigNumber
        lastRebalanceTotalSquartAmount: BigNumber
        lastFee0Growth: BigNumber
        lastFee1Growth: BigNumber
        borrowPremium0Growth: BigNumber
        borrowPremium1Growth: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        rebalancePositionUnderlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalancePositionStable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        rebalanceFeeGrowthUnderlying: BigNumber
        rebalanceFeeGrowthStable: BigNumber
      }
      isMarginZero: boolean
      isIsolatedMode: boolean
      lastUpdateTimestamp: BigNumber
    }
  >

  getPairGroup(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, number] & {
      id: BigNumber
      stableTokenAddress: string
      marginRoundedDecimal: number
    }
  >

  getSqrtPrice(
    _pairId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getVault(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      boolean,
      ([
        BigNumber,
        number,
        number,
        BigNumber,
        [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber
          entryValue: BigNumber
          stableRebalanceEntryValue: BigNumber
          underlyingRebalanceEntryValue: BigNumber
          entryTradeFee0: BigNumber
          entryTradeFee1: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
      ] & {
        pairId: BigNumber
        rebalanceLastTickLower: number
        rebalanceLastTickUpper: number
        lastNumRebalance: BigNumber
        perp: [BigNumber, BigNumber] & {
          amount: BigNumber
          entryValue: BigNumber
        }
        sqrtPerp: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber
          entryValue: BigNumber
          stableRebalanceEntryValue: BigNumber
          underlyingRebalanceEntryValue: BigNumber
          entryTradeFee0: BigNumber
          entryTradeFee1: BigNumber
        }
        underlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        stable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
      })[]
    ] & {
      id: BigNumber
      pairGroupId: BigNumber
      owner: string
      margin: BigNumber
      autoTransferDisabled: boolean
      openPositions: ([
        BigNumber,
        number,
        number,
        BigNumber,
        [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          amount: BigNumber
          entryValue: BigNumber
          stableRebalanceEntryValue: BigNumber
          underlyingRebalanceEntryValue: BigNumber
          entryTradeFee0: BigNumber
          entryTradeFee1: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        },
        [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
      ] & {
        pairId: BigNumber
        rebalanceLastTickLower: number
        rebalanceLastTickUpper: number
        lastNumRebalance: BigNumber
        perp: [BigNumber, BigNumber] & {
          amount: BigNumber
          entryValue: BigNumber
        }
        sqrtPerp: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          amount: BigNumber
          entryValue: BigNumber
          stableRebalanceEntryValue: BigNumber
          underlyingRebalanceEntryValue: BigNumber
          entryTradeFee0: BigNumber
          entryTradeFee1: BigNumber
        }
        underlying: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
        stable: [BigNumber, BigNumber] & {
          positionAmount: BigNumber
          lastFeeGrowth: BigNumber
        }
      })[]
    }
  >

  getVaultStatus(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setAutoTransfer(
    _isolatedVaultId: BigNumberish,
    _autoTransferDisabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  tradePerp(
    _vaultId: BigNumberish,
    _pairId: BigNumberish,
    _tradeParams: {
      tradeAmount: BigNumberish
      tradeAmountSqrt: BigNumberish
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
      enableCallback: boolean
      data: BytesLike
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateMargin(
    _pairGroupId: BigNumberish,
    _marginAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateMarginOfIsolated(
    _pairGroupId: BigNumberish,
    _isolatedVaultId: BigNumberish,
    _marginAmount: BigNumberish,
    _moveFromMainVault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        [
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        ] & {
          token: string
          supplyTokenAddress: string
          tokenStatus: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          }
          irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        },
        [
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        ] & {
          token: string
          supplyTokenAddress: string
          tokenStatus: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          }
          irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        },
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        },
        [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          numRebalance: BigNumber
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          lastRebalanceTotalSquartAmount: BigNumber
          lastFee0Growth: BigNumber
          lastFee1Growth: BigNumber
          borrowPremium0Growth: BigNumber
          borrowPremium1Growth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        },
        boolean,
        boolean,
        BigNumber
      ] & {
        id: BigNumber
        pairGroupId: BigNumber
        stablePool: [
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        ] & {
          token: string
          supplyTokenAddress: string
          tokenStatus: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          }
          irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        }
        underlyingPool: [
          string,
          string,
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        ] & {
          token: string
          supplyTokenAddress: string
          tokenStatus: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            totalCompoundDeposited: BigNumber
            totalNormalDeposited: BigNumber
            totalNormalBorrowed: BigNumber
            assetScaler: BigNumber
            assetGrowth: BigNumber
            debtGrowth: BigNumber
          }
          irmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            baseRate: BigNumber
            kinkRate: BigNumber
            slope1: BigNumber
            slope2: BigNumber
          }
        }
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
        sqrtAssetStatus: [
          string,
          number,
          number,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          BigNumber,
          BigNumber
        ] & {
          uniswapPool: string
          tickLower: number
          tickUpper: number
          numRebalance: BigNumber
          totalAmount: BigNumber
          borrowedAmount: BigNumber
          lastRebalanceTotalSquartAmount: BigNumber
          lastFee0Growth: BigNumber
          lastFee1Growth: BigNumber
          borrowPremium0Growth: BigNumber
          borrowPremium1Growth: BigNumber
          fee0Growth: BigNumber
          fee1Growth: BigNumber
          rebalancePositionUnderlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalancePositionStable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          rebalanceFeeGrowthUnderlying: BigNumber
          rebalanceFeeGrowthStable: BigNumber
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumber
      }
    >

    getPairGroup(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, number] & {
        id: BigNumber
        stableTokenAddress: string
        marginRoundedDecimal: number
      }
    >

    getSqrtPrice(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        boolean,
        ([
          BigNumber,
          number,
          number,
          BigNumber,
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
        ] & {
          pairId: BigNumber
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          lastNumRebalance: BigNumber
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
        })[]
      ] & {
        id: BigNumber
        pairGroupId: BigNumber
        owner: string
        margin: BigNumber
        autoTransferDisabled: boolean
        openPositions: ([
          BigNumber,
          number,
          number,
          BigNumber,
          [BigNumber, BigNumber] & { amount: BigNumber; entryValue: BigNumber },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          },
          [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
        ] & {
          pairId: BigNumber
          rebalanceLastTickLower: number
          rebalanceLastTickUpper: number
          lastNumRebalance: BigNumber
          perp: [BigNumber, BigNumber] & {
            amount: BigNumber
            entryValue: BigNumber
          }
          sqrtPerp: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ] & {
            amount: BigNumber
            entryValue: BigNumber
            stableRebalanceEntryValue: BigNumber
            underlyingRebalanceEntryValue: BigNumber
            entryTradeFee0: BigNumber
            entryTradeFee1: BigNumber
          }
          underlying: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
          stable: [BigNumber, BigNumber] & {
            positionAmount: BigNumber
            lastFeeGrowth: BigNumber
          }
        })[]
      }
    >

    getVaultStatus(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        ([
          BigNumber,
          [
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          },
          BigNumber,
          BigNumber
        ] & {
          pairId: BigNumber
          position: [
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          }
          delta: BigNumber
          unrealizedFee: BigNumber
        })[]
      ] & {
        vaultId: BigNumber
        vaultValue: BigNumber
        margin: BigNumber
        positionValue: BigNumber
        minDeposit: BigNumber
        subVaults: ([
          BigNumber,
          [
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          },
          BigNumber,
          BigNumber
        ] & {
          pairId: BigNumber
          position: [
            BigNumber,
            number,
            number,
            BigNumber,
            [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            },
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            },
            [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          ] & {
            pairId: BigNumber
            rebalanceLastTickLower: number
            rebalanceLastTickUpper: number
            lastNumRebalance: BigNumber
            perp: [BigNumber, BigNumber] & {
              amount: BigNumber
              entryValue: BigNumber
            }
            sqrtPerp: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber
            ] & {
              amount: BigNumber
              entryValue: BigNumber
              stableRebalanceEntryValue: BigNumber
              underlyingRebalanceEntryValue: BigNumber
              entryTradeFee0: BigNumber
              entryTradeFee1: BigNumber
            }
            underlying: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
            stable: [BigNumber, BigNumber] & {
              positionAmount: BigNumber
              lastFeeGrowth: BigNumber
            }
          }
          delta: BigNumber
          unrealizedFee: BigNumber
        })[]
      }
    >

    setAutoTransfer(
      _isolatedVaultId: BigNumberish,
      _autoTransferDisabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    tradePerp(
      _vaultId: BigNumberish,
      _pairId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        },
        BigNumber,
        BigNumber
      ] & {
        payoff: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        }
        fee: BigNumber
        minDeposit: BigNumber
      }
    >

    updateMargin(
      _pairGroupId: BigNumberish,
      _marginAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    updateMarginOfIsolated(
      _pairGroupId: BigNumberish,
      _isolatedVaultId: BigNumberish,
      _marginAmount: BigNumberish,
      _moveFromMainVault: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    getAsset(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getPairGroup(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSqrtPrice(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getVault(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getVaultStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setAutoTransfer(
      _isolatedVaultId: BigNumberish,
      _autoTransferDisabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    tradePerp(
      _vaultId: BigNumberish,
      _pairId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateMargin(
      _pairGroupId: BigNumberish,
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateMarginOfIsolated(
      _pairGroupId: BigNumberish,
      _isolatedVaultId: BigNumberish,
      _marginAmount: BigNumberish,
      _moveFromMainVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getAsset(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPairGroup(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSqrtPrice(
      _pairId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVault(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getVaultStatus(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setAutoTransfer(
      _isolatedVaultId: BigNumberish,
      _autoTransferDisabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    tradePerp(
      _vaultId: BigNumberish,
      _pairId: BigNumberish,
      _tradeParams: {
        tradeAmount: BigNumberish
        tradeAmountSqrt: BigNumberish
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
        enableCallback: boolean
        data: BytesLike
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateMargin(
      _pairGroupId: BigNumberish,
      _marginAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateMarginOfIsolated(
      _pairGroupId: BigNumberish,
      _isolatedVaultId: BigNumberish,
      _marginAmount: BigNumberish,
      _moveFromMainVault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface PerpInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'PremiumGrowthUpdated(uint256,uint256,uint256,uint256,uint256,uint256)': EventFragment
    'Rebalanced(uint256,int24,int24,int256)': EventFragment
    'SqrtPositionUpdated(uint256,int256,int256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'PremiumGrowthUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Rebalanced'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'SqrtPositionUpdated'): EventFragment
}

export type PremiumGrowthUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    pairId: BigNumber
    totalAmount: BigNumber
    borrowAmount: BigNumber
    fee0Growth: BigNumber
    fee1Growth: BigNumber
    spread: BigNumber
  }
>

export type RebalancedEvent = TypedEvent<
  [BigNumber, number, number, BigNumber] & {
    pairId: BigNumber
    tickLower: number
    tickUpper: number
    profit: BigNumber
  }
>

export type SqrtPositionUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    pairId: BigNumber
    open: BigNumber
    close: BigNumber
  }
>

export class Perp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: PerpInterface

  functions: {}

  callStatic: {}

  filters: {
    'PremiumGrowthUpdated(uint256,uint256,uint256,uint256,uint256,uint256)'(
      pairId?: null,
      totalAmount?: null,
      borrowAmount?: null,
      fee0Growth?: null,
      fee1Growth?: null,
      spread?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pairId: BigNumber
        totalAmount: BigNumber
        borrowAmount: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        spread: BigNumber
      }
    >

    PremiumGrowthUpdated(
      pairId?: null,
      totalAmount?: null,
      borrowAmount?: null,
      fee0Growth?: null,
      fee1Growth?: null,
      spread?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pairId: BigNumber
        totalAmount: BigNumber
        borrowAmount: BigNumber
        fee0Growth: BigNumber
        fee1Growth: BigNumber
        spread: BigNumber
      }
    >

    'Rebalanced(uint256,int24,int24,int256)'(
      pairId?: null,
      tickLower?: null,
      tickUpper?: null,
      profit?: null
    ): TypedEventFilter<
      [BigNumber, number, number, BigNumber],
      {
        pairId: BigNumber
        tickLower: number
        tickUpper: number
        profit: BigNumber
      }
    >

    Rebalanced(
      pairId?: null,
      tickLower?: null,
      tickUpper?: null,
      profit?: null
    ): TypedEventFilter<
      [BigNumber, number, number, BigNumber],
      {
        pairId: BigNumber
        tickLower: number
        tickUpper: number
        profit: BigNumber
      }
    >

    'SqrtPositionUpdated(uint256,int256,int256)'(
      pairId?: null,
      open?: null,
      close?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { pairId: BigNumber; open: BigNumber; close: BigNumber }
    >

    SqrtPositionUpdated(
      pairId?: null,
      open?: null,
      close?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { pairId: BigNumber; open: BigNumber; close: BigNumber }
    >
  }

  estimateGas: {}

  populateTransaction: {}
}

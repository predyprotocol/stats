/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface GammaShortStrategyInterface extends ethers.utils.Interface {
  functions: {
    'checkPriceHedge(uint256)': FunctionFragment
    'checkTimeHedge(uint256)': FunctionFragment
    'deposit(uint256,uint256,address,uint256,bool,(uint256,uint256,uint256))': FunctionFragment
    'depositForPositionInitialization(uint256,uint64,uint256,int256,int256,(uint256,uint256,uint256))': FunctionFragment
    'execDeltaHedge(uint256,(uint256,uint256,uint256),uint256)': FunctionFragment
    'getDelta(uint256)': FunctionFragment
    'getPrice(uint256)': FunctionFragment
    'getTotalSupply(uint256)': FunctionFragment
    'hedger()': FunctionFragment
    'initialize(address,address,(uint256,uint256))': FunctionFragment
    'operator()': FunctionFragment
    'predyTradeCallback(((int256,int256,int256,int256,int256,int256),int256,int256),bytes)': FunctionFragment
    'reader()': FunctionFragment
    'setHedger(address)': FunctionFragment
    'setOperator(address)': FunctionFragment
    'setReader(address)': FunctionFragment
    'strategies(uint256)': FunctionFragment
    'strategyCount()': FunctionFragment
    'updateGamma(uint256,int256,(uint256,uint256,uint256))': FunctionFragment
    'updateHedgeInterval(uint256,uint256)': FunctionFragment
    'updateHedgePriceThreshold(uint256,uint256)': FunctionFragment
    'withdraw(uint256,uint256,address,int256,(uint256,uint256,uint256))': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'checkPriceHedge',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'checkTimeHedge',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      boolean,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'depositForPositionInitialization',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'execDeltaHedge',
    values: [
      BigNumberish,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getDelta',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getPrice',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getTotalSupply',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'hedger', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, { lower: BigNumberish; upper: BigNumberish }]
  ): string
  encodeFunctionData(functionFragment: 'operator', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'predyTradeCallback',
    values: [
      {
        payoff: {
          perpEntryUpdate: BigNumberish
          sqrtEntryUpdate: BigNumberish
          sqrtRebalanceEntryUpdateUnderlying: BigNumberish
          sqrtRebalanceEntryUpdateStable: BigNumberish
          perpPayoff: BigNumberish
          sqrtPayoff: BigNumberish
        }
        fee: BigNumberish
        minDeposit: BigNumberish
      },
      BytesLike
    ]
  ): string
  encodeFunctionData(functionFragment: 'reader', values?: undefined): string
  encodeFunctionData(functionFragment: 'setHedger', values: [string]): string
  encodeFunctionData(functionFragment: 'setOperator', values: [string]): string
  encodeFunctionData(functionFragment: 'setReader', values: [string]): string
  encodeFunctionData(
    functionFragment: 'strategies',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'strategyCount',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'updateGamma',
    values: [
      BigNumberish,
      BigNumberish,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      }
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'updateHedgeInterval',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'updateHedgePriceThreshold',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      }
    ]
  ): string

  decodeFunctionResult(
    functionFragment: 'checkPriceHedge',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'checkTimeHedge',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'depositForPositionInitialization',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'execDeltaHedge',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getDelta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getTotalSupply',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'hedger', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'operator', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'predyTradeCallback',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'reader', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setHedger', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOperator', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setReader', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'strategies', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'strategyCount',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'updateGamma', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateHedgeInterval',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateHedgePriceThreshold',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'DeltaHedged(uint256,int256)': EventFragment
    'DepositedToStrategy(uint256,address,uint256,uint256)': EventFragment
    'HedgeIntervalUpdated(uint256,uint256)': EventFragment
    'HedgePriceThresholdUpdated(uint256,uint256)': EventFragment
    'HedgerUpdated(address)': EventFragment
    'Initialized(uint8)': EventFragment
    'OperatorUpdated(address)': EventFragment
    'ReaderUpdated(address)': EventFragment
    'StrategyAdded(uint256,uint256)': EventFragment
    'WithdrawnFromStrategy(uint256,address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DeltaHedged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositedToStrategy'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'HedgeIntervalUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'HedgePriceThresholdUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'HedgerUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OperatorUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ReaderUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StrategyAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawnFromStrategy'): EventFragment
}

export type DeltaHedgedEvent = TypedEvent<
  [BigNumber, BigNumber] & { strategyId: BigNumber; delta: BigNumber }
>

export type DepositedToStrategyEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    strategyId: BigNumber
    account: string
    strategyTokenAmount: BigNumber
    depositedAmount: BigNumber
  }
>

export type HedgeIntervalUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { strategyId: BigNumber; hedgeInterval: BigNumber }
>

export type HedgePriceThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    strategyId: BigNumber
    hedgeSqrtPriceThreshold: BigNumber
  }
>

export type HedgerUpdatedEvent = TypedEvent<
  [string] & { newHedgerAddress: string }
>

export type InitializedEvent = TypedEvent<[number] & { version: number }>

export type OperatorUpdatedEvent = TypedEvent<[string] & { operator: string }>

export type ReaderUpdatedEvent = TypedEvent<
  [string] & { newReaderAddress: string }
>

export type StrategyAddedEvent = TypedEvent<
  [BigNumber, BigNumber] & { strategyId: BigNumber; pairId: BigNumber }
>

export type WithdrawnFromStrategyEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    strategyId: BigNumber
    account: string
    strategyTokenAmount: BigNumber
    withdrawnAmount: BigNumber
  }
>

export class GammaShortStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: GammaShortStrategyInterface

  functions: {
    checkPriceHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    checkTimeHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    deposit(
      _strategyId: BigNumberish,
      _strategyTokenAmount: BigNumberish,
      _recepient: string,
      _maxDepositAmount: BigNumberish,
      isQuoteMode: boolean,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    depositForPositionInitialization(
      _strategyId: BigNumberish,
      _pairId: BigNumberish,
      _initialMarginAmount: BigNumberish,
      _initialPerpAmount: BigNumberish,
      _initialSquartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    execDeltaHedge(
      _strategyId: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      _deltaRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getDelta(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPrice(
      _strategyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getTotalSupply(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    hedger(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _controller: string,
      _reader: string,
      _minPerValueLimit: { lower: BigNumberish; upper: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    operator(overrides?: CallOverrides): Promise<[string]>

    predyTradeCallback(
      _tradeResult: {
        payoff: {
          perpEntryUpdate: BigNumberish
          sqrtEntryUpdate: BigNumberish
          sqrtRebalanceEntryUpdateUnderlying: BigNumberish
          sqrtRebalanceEntryUpdateStable: BigNumberish
          perpPayoff: BigNumberish
          sqrtPayoff: BigNumberish
        }
        fee: BigNumberish
        minDeposit: BigNumberish
      },
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    reader(overrides?: CallOverrides): Promise<[string]>

    setHedger(
      _newHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastHedgeTimestamp: BigNumber
          lastHedgePrice: BigNumber
          hedgeInterval: BigNumber
          hedgeSqrtPriceThreshold: BigNumber
        }
      ] & {
        id: BigNumber
        pairGroupId: BigNumber
        pairId: BigNumber
        vaultId: BigNumber
        marginToken: string
        marginRoundedScaler: BigNumber
        strategyToken: string
        hedgeStatus: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastHedgeTimestamp: BigNumber
          lastHedgePrice: BigNumber
          hedgeInterval: BigNumber
          hedgeSqrtPriceThreshold: BigNumber
        }
      }
    >

    strategyCount(overrides?: CallOverrides): Promise<[BigNumber]>

    updateGamma(
      _strategyId: BigNumberish,
      _squartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateHedgeInterval(
      _strategyId: BigNumberish,
      _hedgeInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateHedgePriceThreshold(
      _strategyId: BigNumberish,
      _newSqrtPriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      _strategyId: BigNumberish,
      _withdrawStrategyAmount: BigNumberish,
      _recepient: string,
      _minWithdrawAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  checkPriceHedge(
    _strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  checkTimeHedge(
    _strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  deposit(
    _strategyId: BigNumberish,
    _strategyTokenAmount: BigNumberish,
    _recepient: string,
    _maxDepositAmount: BigNumberish,
    isQuoteMode: boolean,
    _tradeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  depositForPositionInitialization(
    _strategyId: BigNumberish,
    _pairId: BigNumberish,
    _initialMarginAmount: BigNumberish,
    _initialPerpAmount: BigNumberish,
    _initialSquartAmount: BigNumberish,
    _tradeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  execDeltaHedge(
    _strategyId: BigNumberish,
    _tradeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    _deltaRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getDelta(
    _strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPrice(
    _strategyId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getTotalSupply(
    _strategyId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  hedger(overrides?: CallOverrides): Promise<string>

  initialize(
    _controller: string,
    _reader: string,
    _minPerValueLimit: { lower: BigNumberish; upper: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  operator(overrides?: CallOverrides): Promise<string>

  predyTradeCallback(
    _tradeResult: {
      payoff: {
        perpEntryUpdate: BigNumberish
        sqrtEntryUpdate: BigNumberish
        sqrtRebalanceEntryUpdateUnderlying: BigNumberish
        sqrtRebalanceEntryUpdateStable: BigNumberish
        perpPayoff: BigNumberish
        sqrtPayoff: BigNumberish
      }
      fee: BigNumberish
      minDeposit: BigNumberish
    },
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  reader(overrides?: CallOverrides): Promise<string>

  setHedger(
    _newHedger: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOperator(
    _newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setReader(
    _reader: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  strategies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastHedgeTimestamp: BigNumber
        lastHedgePrice: BigNumber
        hedgeInterval: BigNumber
        hedgeSqrtPriceThreshold: BigNumber
      }
    ] & {
      id: BigNumber
      pairGroupId: BigNumber
      pairId: BigNumber
      vaultId: BigNumber
      marginToken: string
      marginRoundedScaler: BigNumber
      strategyToken: string
      hedgeStatus: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        lastHedgeTimestamp: BigNumber
        lastHedgePrice: BigNumber
        hedgeInterval: BigNumber
        hedgeSqrtPriceThreshold: BigNumber
      }
    }
  >

  strategyCount(overrides?: CallOverrides): Promise<BigNumber>

  updateGamma(
    _strategyId: BigNumberish,
    _squartAmount: BigNumberish,
    _tradeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateHedgeInterval(
    _strategyId: BigNumberish,
    _hedgeInterval: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateHedgePriceThreshold(
    _strategyId: BigNumberish,
    _newSqrtPriceThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    _strategyId: BigNumberish,
    _withdrawStrategyAmount: BigNumberish,
    _recepient: string,
    _minWithdrawAmount: BigNumberish,
    _tradeParams: {
      lowerSqrtPrice: BigNumberish
      upperSqrtPrice: BigNumberish
      deadline: BigNumberish
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    checkPriceHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    checkTimeHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    deposit(
      _strategyId: BigNumberish,
      _strategyTokenAmount: BigNumberish,
      _recepient: string,
      _maxDepositAmount: BigNumberish,
      isQuoteMode: boolean,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    depositForPositionInitialization(
      _strategyId: BigNumberish,
      _pairId: BigNumberish,
      _initialMarginAmount: BigNumberish,
      _initialPerpAmount: BigNumberish,
      _initialSquartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>

    execDeltaHedge(
      _strategyId: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      _deltaRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getDelta(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPrice(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getTotalSupply(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hedger(overrides?: CallOverrides): Promise<string>

    initialize(
      _controller: string,
      _reader: string,
      _minPerValueLimit: { lower: BigNumberish; upper: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>

    operator(overrides?: CallOverrides): Promise<string>

    predyTradeCallback(
      _tradeResult: {
        payoff: {
          perpEntryUpdate: BigNumberish
          sqrtEntryUpdate: BigNumberish
          sqrtRebalanceEntryUpdateUnderlying: BigNumberish
          sqrtRebalanceEntryUpdateStable: BigNumberish
          perpPayoff: BigNumberish
          sqrtPayoff: BigNumberish
        }
        fee: BigNumberish
        minDeposit: BigNumberish
      },
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    reader(overrides?: CallOverrides): Promise<string>

    setHedger(_newHedger: string, overrides?: CallOverrides): Promise<void>

    setOperator(_newOperator: string, overrides?: CallOverrides): Promise<void>

    setReader(_reader: string, overrides?: CallOverrides): Promise<void>

    strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastHedgeTimestamp: BigNumber
          lastHedgePrice: BigNumber
          hedgeInterval: BigNumber
          hedgeSqrtPriceThreshold: BigNumber
        }
      ] & {
        id: BigNumber
        pairGroupId: BigNumber
        pairId: BigNumber
        vaultId: BigNumber
        marginToken: string
        marginRoundedScaler: BigNumber
        strategyToken: string
        hedgeStatus: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          lastHedgeTimestamp: BigNumber
          lastHedgePrice: BigNumber
          hedgeInterval: BigNumber
          hedgeSqrtPriceThreshold: BigNumber
        }
      }
    >

    strategyCount(overrides?: CallOverrides): Promise<BigNumber>

    updateGamma(
      _strategyId: BigNumberish,
      _squartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<void>

    updateHedgeInterval(
      _strategyId: BigNumberish,
      _hedgeInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    updateHedgePriceThreshold(
      _strategyId: BigNumberish,
      _newSqrtPriceThreshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(
      _strategyId: BigNumberish,
      _withdrawStrategyAmount: BigNumberish,
      _recepient: string,
      _minWithdrawAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'DeltaHedged(uint256,int256)'(
      strategyId?: null,
      delta?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; delta: BigNumber }
    >

    DeltaHedged(
      strategyId?: null,
      delta?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; delta: BigNumber }
    >

    'DepositedToStrategy(uint256,address,uint256,uint256)'(
      strategyId?: null,
      account?: string | null,
      strategyTokenAmount?: null,
      depositedAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        strategyId: BigNumber
        account: string
        strategyTokenAmount: BigNumber
        depositedAmount: BigNumber
      }
    >

    DepositedToStrategy(
      strategyId?: null,
      account?: string | null,
      strategyTokenAmount?: null,
      depositedAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        strategyId: BigNumber
        account: string
        strategyTokenAmount: BigNumber
        depositedAmount: BigNumber
      }
    >

    'HedgeIntervalUpdated(uint256,uint256)'(
      strategyId?: null,
      hedgeInterval?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; hedgeInterval: BigNumber }
    >

    HedgeIntervalUpdated(
      strategyId?: null,
      hedgeInterval?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; hedgeInterval: BigNumber }
    >

    'HedgePriceThresholdUpdated(uint256,uint256)'(
      strategyId?: null,
      hedgeSqrtPriceThreshold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; hedgeSqrtPriceThreshold: BigNumber }
    >

    HedgePriceThresholdUpdated(
      strategyId?: null,
      hedgeSqrtPriceThreshold?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; hedgeSqrtPriceThreshold: BigNumber }
    >

    'HedgerUpdated(address)'(
      newHedgerAddress?: null
    ): TypedEventFilter<[string], { newHedgerAddress: string }>

    HedgerUpdated(
      newHedgerAddress?: null
    ): TypedEventFilter<[string], { newHedgerAddress: string }>

    'Initialized(uint8)'(
      version?: null
    ): TypedEventFilter<[number], { version: number }>

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>

    'OperatorUpdated(address)'(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>

    OperatorUpdated(
      operator?: null
    ): TypedEventFilter<[string], { operator: string }>

    'ReaderUpdated(address)'(
      newReaderAddress?: null
    ): TypedEventFilter<[string], { newReaderAddress: string }>

    ReaderUpdated(
      newReaderAddress?: null
    ): TypedEventFilter<[string], { newReaderAddress: string }>

    'StrategyAdded(uint256,uint256)'(
      strategyId?: null,
      pairId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; pairId: BigNumber }
    >

    StrategyAdded(
      strategyId?: null,
      pairId?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { strategyId: BigNumber; pairId: BigNumber }
    >

    'WithdrawnFromStrategy(uint256,address,uint256,uint256)'(
      strategyId?: null,
      account?: string | null,
      strategyTokenAmount?: null,
      withdrawnAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        strategyId: BigNumber
        account: string
        strategyTokenAmount: BigNumber
        withdrawnAmount: BigNumber
      }
    >

    WithdrawnFromStrategy(
      strategyId?: null,
      account?: string | null,
      strategyTokenAmount?: null,
      withdrawnAmount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        strategyId: BigNumber
        account: string
        strategyTokenAmount: BigNumber
        withdrawnAmount: BigNumber
      }
    >
  }

  estimateGas: {
    checkPriceHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    checkTimeHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    deposit(
      _strategyId: BigNumberish,
      _strategyTokenAmount: BigNumberish,
      _recepient: string,
      _maxDepositAmount: BigNumberish,
      isQuoteMode: boolean,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    depositForPositionInitialization(
      _strategyId: BigNumberish,
      _pairId: BigNumberish,
      _initialMarginAmount: BigNumberish,
      _initialPerpAmount: BigNumberish,
      _initialSquartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    execDeltaHedge(
      _strategyId: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      _deltaRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getDelta(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPrice(
      _strategyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getTotalSupply(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    hedger(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _controller: string,
      _reader: string,
      _minPerValueLimit: { lower: BigNumberish; upper: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    operator(overrides?: CallOverrides): Promise<BigNumber>

    predyTradeCallback(
      _tradeResult: {
        payoff: {
          perpEntryUpdate: BigNumberish
          sqrtEntryUpdate: BigNumberish
          sqrtRebalanceEntryUpdateUnderlying: BigNumberish
          sqrtRebalanceEntryUpdateStable: BigNumberish
          perpPayoff: BigNumberish
          sqrtPayoff: BigNumberish
        }
        fee: BigNumberish
        minDeposit: BigNumberish
      },
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    reader(overrides?: CallOverrides): Promise<BigNumber>

    setHedger(
      _newHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    strategyCount(overrides?: CallOverrides): Promise<BigNumber>

    updateGamma(
      _strategyId: BigNumberish,
      _squartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateHedgeInterval(
      _strategyId: BigNumberish,
      _hedgeInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateHedgePriceThreshold(
      _strategyId: BigNumberish,
      _newSqrtPriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      _strategyId: BigNumberish,
      _withdrawStrategyAmount: BigNumberish,
      _recepient: string,
      _minWithdrawAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    checkPriceHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    checkTimeHedge(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    deposit(
      _strategyId: BigNumberish,
      _strategyTokenAmount: BigNumberish,
      _recepient: string,
      _maxDepositAmount: BigNumberish,
      isQuoteMode: boolean,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    depositForPositionInitialization(
      _strategyId: BigNumberish,
      _pairId: BigNumberish,
      _initialMarginAmount: BigNumberish,
      _initialPerpAmount: BigNumberish,
      _initialSquartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    execDeltaHedge(
      _strategyId: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      _deltaRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getDelta(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPrice(
      _strategyId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getTotalSupply(
      _strategyId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hedger(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _controller: string,
      _reader: string,
      _minPerValueLimit: { lower: BigNumberish; upper: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    operator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    predyTradeCallback(
      _tradeResult: {
        payoff: {
          perpEntryUpdate: BigNumberish
          sqrtEntryUpdate: BigNumberish
          sqrtRebalanceEntryUpdateUnderlying: BigNumberish
          sqrtRebalanceEntryUpdateStable: BigNumberish
          perpPayoff: BigNumberish
          sqrtPayoff: BigNumberish
        }
        fee: BigNumberish
        minDeposit: BigNumberish
      },
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    reader(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setHedger(
      _newHedger: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setReader(
      _reader: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    strategies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    strategyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    updateGamma(
      _strategyId: BigNumberish,
      _squartAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateHedgeInterval(
      _strategyId: BigNumberish,
      _hedgeInterval: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateHedgePriceThreshold(
      _strategyId: BigNumberish,
      _newSqrtPriceThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      _strategyId: BigNumberish,
      _withdrawStrategyAmount: BigNumberish,
      _recepient: string,
      _minWithdrawAmount: BigNumberish,
      _tradeParams: {
        lowerSqrtPrice: BigNumberish
        upperSqrtPrice: BigNumberish
        deadline: BigNumberish
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}

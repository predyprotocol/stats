/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface LiquidationLogicInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'PositionLiquidated(uint256,uint256,int256,int256,tuple,int256)': EventFragment
    'VaultLiquidated(uint256,uint256,uint256,address,int256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'PositionLiquidated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'VaultLiquidated'): EventFragment
}

export type PositionLiquidatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      perpEntryUpdate: BigNumber
      sqrtEntryUpdate: BigNumber
      sqrtRebalanceEntryUpdateUnderlying: BigNumber
      sqrtRebalanceEntryUpdateStable: BigNumber
      perpPayoff: BigNumber
      sqrtPayoff: BigNumber
    },
    BigNumber
  ] & {
    vaultId: BigNumber
    pairId: BigNumber
    tradeAmount: BigNumber
    tradeSqrtAmount: BigNumber
    payoff: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      perpEntryUpdate: BigNumber
      sqrtEntryUpdate: BigNumber
      sqrtRebalanceEntryUpdateUnderlying: BigNumber
      sqrtRebalanceEntryUpdateStable: BigNumber
      perpPayoff: BigNumber
      sqrtPayoff: BigNumber
    }
    fee: BigNumber
  }
>

export type VaultLiquidatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
    vaultId: BigNumber
    mainVaultId: BigNumber
    withdrawnMarginAmount: BigNumber
    liquidator: string
    totalPenaltyAmount: BigNumber
  }
>

export class LiquidationLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: LiquidationLogicInterface

  functions: {}

  callStatic: {}

  filters: {
    'PositionLiquidated(uint256,uint256,int256,int256,tuple,int256)'(
      vaultId?: null,
      pairId?: null,
      tradeAmount?: null,
      tradeSqrtAmount?: null,
      payoff?: null,
      fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        },
        BigNumber
      ],
      {
        vaultId: BigNumber
        pairId: BigNumber
        tradeAmount: BigNumber
        tradeSqrtAmount: BigNumber
        payoff: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        }
        fee: BigNumber
      }
    >

    PositionLiquidated(
      vaultId?: null,
      pairId?: null,
      tradeAmount?: null,
      tradeSqrtAmount?: null,
      payoff?: null,
      fee?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        },
        BigNumber
      ],
      {
        vaultId: BigNumber
        pairId: BigNumber
        tradeAmount: BigNumber
        tradeSqrtAmount: BigNumber
        payoff: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          perpEntryUpdate: BigNumber
          sqrtEntryUpdate: BigNumber
          sqrtRebalanceEntryUpdateUnderlying: BigNumber
          sqrtRebalanceEntryUpdateStable: BigNumber
          perpPayoff: BigNumber
          sqrtPayoff: BigNumber
        }
        fee: BigNumber
      }
    >

    'VaultLiquidated(uint256,uint256,uint256,address,int256)'(
      vaultId?: null,
      mainVaultId?: null,
      withdrawnMarginAmount?: null,
      liquidator?: null,
      totalPenaltyAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        vaultId: BigNumber
        mainVaultId: BigNumber
        withdrawnMarginAmount: BigNumber
        liquidator: string
        totalPenaltyAmount: BigNumber
      }
    >

    VaultLiquidated(
      vaultId?: null,
      mainVaultId?: null,
      withdrawnMarginAmount?: null,
      liquidator?: null,
      totalPenaltyAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, string, BigNumber],
      {
        vaultId: BigNumber
        mainVaultId: BigNumber
        withdrawnMarginAmount: BigNumber
        liquidator: string
        totalPenaltyAmount: BigNumber
      }
    >
  }

  estimateGas: {}

  populateTransaction: {}
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface AddAssetLogicInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'AssetRiskParamsUpdated(uint256,tuple)': EventFragment
    'IRMParamsUpdated(uint256,tuple,tuple)': EventFragment
    'PairAdded(uint256,address)': EventFragment
    'PairGroupAdded(uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AssetRiskParamsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'IRMParamsUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PairAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PairGroupAdded'): EventFragment
}

export type AssetRiskParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, number, number] & {
      riskRatio: BigNumber
      rangeSize: number
      rebalanceThreshold: number
    }
  ] & {
    pairId: BigNumber
    riskParams: [BigNumber, number, number] & {
      riskRatio: BigNumber
      rangeSize: number
      rebalanceThreshold: number
    }
  }
>

export type IRMParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    },
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
  ] & {
    pairId: BigNumber
    stableIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
    underlyingIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseRate: BigNumber
      kinkRate: BigNumber
      slope1: BigNumber
      slope2: BigNumber
    }
  }
>

export type PairAddedEvent = TypedEvent<
  [BigNumber, string] & { pairId: BigNumber; _uniswapPool: string }
>

export type PairGroupAddedEvent = TypedEvent<
  [BigNumber, string] & { id: BigNumber; stableAsset: string }
>

export class AddAssetLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: AddAssetLogicInterface

  functions: {}

  callStatic: {}

  filters: {
    'AssetRiskParamsUpdated(uint256,tuple)'(
      pairId?: null,
      riskParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      ],
      {
        pairId: BigNumber
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      }
    >

    AssetRiskParamsUpdated(
      pairId?: null,
      riskParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      ],
      {
        pairId: BigNumber
        riskParams: [BigNumber, number, number] & {
          riskRatio: BigNumber
          rangeSize: number
          rebalanceThreshold: number
        }
      }
    >

    'IRMParamsUpdated(uint256,tuple,tuple)'(
      pairId?: null,
      stableIrmParams?: null,
      underlyingIrmParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ],
      {
        pairId: BigNumber
        stableIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        underlyingIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
    >

    IRMParamsUpdated(
      pairId?: null,
      stableIrmParams?: null,
      underlyingIrmParams?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      ],
      {
        pairId: BigNumber
        stableIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
        underlyingIrmParams: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          baseRate: BigNumber
          kinkRate: BigNumber
          slope1: BigNumber
          slope2: BigNumber
        }
      }
    >

    'PairAdded(uint256,address)'(
      pairId?: null,
      _uniswapPool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { pairId: BigNumber; _uniswapPool: string }
    >

    PairAdded(
      pairId?: null,
      _uniswapPool?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { pairId: BigNumber; _uniswapPool: string }
    >

    'PairGroupAdded(uint256,address)'(
      id?: null,
      stableAsset?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; stableAsset: string }
    >

    PairGroupAdded(
      id?: null,
      stableAsset?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { id: BigNumber; stableAsset: string }
    >
  }

  estimateGas: {}

  populateTransaction: {}
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  ApplyInterestLogic,
  ApplyInterestLogicInterface
} from '../ApplyInterestLogic'

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'pairId',
        type: 'uint256'
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'totalCompoundDeposited',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'totalNormalDeposited',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'totalNormalBorrowed',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'assetScaler',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'assetGrowth',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'debtGrowth',
            type: 'uint256'
          }
        ],
        indexed: false,
        internalType: 'struct ScaledAsset.TokenStatus',
        name: 'stableStatus',
        type: 'tuple'
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'totalCompoundDeposited',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'totalNormalDeposited',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'totalNormalBorrowed',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'assetScaler',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'assetGrowth',
            type: 'uint256'
          },
          {
            internalType: 'uint256',
            name: 'debtGrowth',
            type: 'uint256'
          }
        ],
        indexed: false,
        internalType: 'struct ScaledAsset.TokenStatus',
        name: 'underlyingStatus',
        type: 'tuple'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'interestRateStable',
        type: 'uint256'
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'interestRateUnderlying',
        type: 'uint256'
      }
    ],
    name: 'InterestGrowthUpdated',
    type: 'event'
  }
]

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220098b50de529a4476f076d3dc5c252867e94df5b134422dae6896b9f2445b913364736f6c63430008130033'

export class ApplyInterestLogic__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0])
    } else {
      super(...args)
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ApplyInterestLogic> {
    return super.deploy(overrides || {}) as Promise<ApplyInterestLogic>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): ApplyInterestLogic {
    return super.attach(address) as ApplyInterestLogic
  }
  connect(signer: Signer): ApplyInterestLogic__factory {
    return super.connect(signer) as ApplyInterestLogic__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ApplyInterestLogicInterface {
    return new utils.Interface(_abi) as ApplyInterestLogicInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ApplyInterestLogic {
    return new Contract(address, _abi, signerOrProvider) as ApplyInterestLogic
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface ReaderLogicInterface extends ethers.utils.Interface {
  functions: {
    'getUtilizationRatio((uint256,uint256,(address,address,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256)),(address,address,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256)),(uint256,int24,int24),(address,int24,int24,uint64,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,(int256,uint256),(int256,uint256),int256,int256),bool,bool,uint256))': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'getUtilizationRatio',
    values: [
      {
        id: BigNumberish
        pairGroupId: BigNumberish
        stablePool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        underlyingPool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        riskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        sqrtAssetStatus: {
          uniswapPool: string
          tickLower: BigNumberish
          tickUpper: BigNumberish
          numRebalance: BigNumberish
          totalAmount: BigNumberish
          borrowedAmount: BigNumberish
          lastRebalanceTotalSquartAmount: BigNumberish
          lastFee0Growth: BigNumberish
          lastFee1Growth: BigNumberish
          borrowPremium0Growth: BigNumberish
          borrowPremium1Growth: BigNumberish
          fee0Growth: BigNumberish
          fee1Growth: BigNumberish
          rebalancePositionUnderlying: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalancePositionStable: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalanceFeeGrowthUnderlying: BigNumberish
          rebalanceFeeGrowthStable: BigNumberish
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumberish
      }
    ]
  ): string

  decodeFunctionResult(
    functionFragment: 'getUtilizationRatio',
    data: BytesLike
  ): Result

  events: {}
}

export class ReaderLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ReaderLogicInterface

  functions: {
    getUtilizationRatio(
      _assetStatus: {
        id: BigNumberish
        pairGroupId: BigNumberish
        stablePool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        underlyingPool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        riskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        sqrtAssetStatus: {
          uniswapPool: string
          tickLower: BigNumberish
          tickUpper: BigNumberish
          numRebalance: BigNumberish
          totalAmount: BigNumberish
          borrowedAmount: BigNumberish
          lastRebalanceTotalSquartAmount: BigNumberish
          lastFee0Growth: BigNumberish
          lastFee1Growth: BigNumberish
          borrowPremium0Growth: BigNumberish
          borrowPremium1Growth: BigNumberish
          fee0Growth: BigNumberish
          fee1Growth: BigNumberish
          rebalancePositionUnderlying: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalancePositionStable: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalanceFeeGrowthUnderlying: BigNumberish
          rebalanceFeeGrowthStable: BigNumberish
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>
  }

  getUtilizationRatio(
    _assetStatus: {
      id: BigNumberish
      pairGroupId: BigNumberish
      stablePool: {
        token: string
        supplyTokenAddress: string
        tokenStatus: {
          totalCompoundDeposited: BigNumberish
          totalNormalDeposited: BigNumberish
          totalNormalBorrowed: BigNumberish
          assetScaler: BigNumberish
          assetGrowth: BigNumberish
          debtGrowth: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }
      underlyingPool: {
        token: string
        supplyTokenAddress: string
        tokenStatus: {
          totalCompoundDeposited: BigNumberish
          totalNormalDeposited: BigNumberish
          totalNormalBorrowed: BigNumberish
          assetScaler: BigNumberish
          assetGrowth: BigNumberish
          debtGrowth: BigNumberish
        }
        irmParams: {
          baseRate: BigNumberish
          kinkRate: BigNumberish
          slope1: BigNumberish
          slope2: BigNumberish
        }
      }
      riskParams: {
        riskRatio: BigNumberish
        rangeSize: BigNumberish
        rebalanceThreshold: BigNumberish
      }
      sqrtAssetStatus: {
        uniswapPool: string
        tickLower: BigNumberish
        tickUpper: BigNumberish
        numRebalance: BigNumberish
        totalAmount: BigNumberish
        borrowedAmount: BigNumberish
        lastRebalanceTotalSquartAmount: BigNumberish
        lastFee0Growth: BigNumberish
        lastFee1Growth: BigNumberish
        borrowPremium0Growth: BigNumberish
        borrowPremium1Growth: BigNumberish
        fee0Growth: BigNumberish
        fee1Growth: BigNumberish
        rebalancePositionUnderlying: {
          positionAmount: BigNumberish
          lastFeeGrowth: BigNumberish
        }
        rebalancePositionStable: {
          positionAmount: BigNumberish
          lastFeeGrowth: BigNumberish
        }
        rebalanceFeeGrowthUnderlying: BigNumberish
        rebalanceFeeGrowthStable: BigNumberish
      }
      isMarginZero: boolean
      isIsolatedMode: boolean
      lastUpdateTimestamp: BigNumberish
    },
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>

  callStatic: {
    getUtilizationRatio(
      _assetStatus: {
        id: BigNumberish
        pairGroupId: BigNumberish
        stablePool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        underlyingPool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        riskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        sqrtAssetStatus: {
          uniswapPool: string
          tickLower: BigNumberish
          tickUpper: BigNumberish
          numRebalance: BigNumberish
          totalAmount: BigNumberish
          borrowedAmount: BigNumberish
          lastRebalanceTotalSquartAmount: BigNumberish
          lastFee0Growth: BigNumberish
          lastFee1Growth: BigNumberish
          borrowPremium0Growth: BigNumberish
          borrowPremium1Growth: BigNumberish
          fee0Growth: BigNumberish
          fee1Growth: BigNumberish
          rebalancePositionUnderlying: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalancePositionStable: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalanceFeeGrowthUnderlying: BigNumberish
          rebalanceFeeGrowthStable: BigNumberish
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>
  }

  filters: {}

  estimateGas: {
    getUtilizationRatio(
      _assetStatus: {
        id: BigNumberish
        pairGroupId: BigNumberish
        stablePool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        underlyingPool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        riskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        sqrtAssetStatus: {
          uniswapPool: string
          tickLower: BigNumberish
          tickUpper: BigNumberish
          numRebalance: BigNumberish
          totalAmount: BigNumberish
          borrowedAmount: BigNumberish
          lastRebalanceTotalSquartAmount: BigNumberish
          lastFee0Growth: BigNumberish
          lastFee1Growth: BigNumberish
          borrowPremium0Growth: BigNumberish
          borrowPremium1Growth: BigNumberish
          fee0Growth: BigNumberish
          fee1Growth: BigNumberish
          rebalancePositionUnderlying: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalancePositionStable: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalanceFeeGrowthUnderlying: BigNumberish
          rebalanceFeeGrowthStable: BigNumberish
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getUtilizationRatio(
      _assetStatus: {
        id: BigNumberish
        pairGroupId: BigNumberish
        stablePool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        underlyingPool: {
          token: string
          supplyTokenAddress: string
          tokenStatus: {
            totalCompoundDeposited: BigNumberish
            totalNormalDeposited: BigNumberish
            totalNormalBorrowed: BigNumberish
            assetScaler: BigNumberish
            assetGrowth: BigNumberish
            debtGrowth: BigNumberish
          }
          irmParams: {
            baseRate: BigNumberish
            kinkRate: BigNumberish
            slope1: BigNumberish
            slope2: BigNumberish
          }
        }
        riskParams: {
          riskRatio: BigNumberish
          rangeSize: BigNumberish
          rebalanceThreshold: BigNumberish
        }
        sqrtAssetStatus: {
          uniswapPool: string
          tickLower: BigNumberish
          tickUpper: BigNumberish
          numRebalance: BigNumberish
          totalAmount: BigNumberish
          borrowedAmount: BigNumberish
          lastRebalanceTotalSquartAmount: BigNumberish
          lastFee0Growth: BigNumberish
          lastFee1Growth: BigNumberish
          borrowPremium0Growth: BigNumberish
          borrowPremium1Growth: BigNumberish
          fee0Growth: BigNumberish
          fee1Growth: BigNumberish
          rebalancePositionUnderlying: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalancePositionStable: {
            positionAmount: BigNumberish
            lastFeeGrowth: BigNumberish
          }
          rebalanceFeeGrowthUnderlying: BigNumberish
          rebalanceFeeGrowthStable: BigNumberish
        }
        isMarginZero: boolean
        isIsolatedMode: boolean
        lastUpdateTimestamp: BigNumberish
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>
  }
}

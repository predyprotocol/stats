/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface ApplyInterestLibInterface extends ethers.utils.Interface {
  functions: {}

  events: {
    'InterestGrowthUpdated(uint256,tuple,tuple,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'InterestGrowthUpdated'): EventFragment
}

export type InterestGrowthUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCompoundDeposited: BigNumber
      totalNormalDeposited: BigNumber
      totalNormalBorrowed: BigNumber
      assetScaler: BigNumber
      assetGrowth: BigNumber
      debtGrowth: BigNumber
    },
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalCompoundDeposited: BigNumber
      totalNormalDeposited: BigNumber
      totalNormalBorrowed: BigNumber
      assetScaler: BigNumber
      assetGrowth: BigNumber
      debtGrowth: BigNumber
    },
    BigNumber,
    BigNumber
  ] & {
    pairId: BigNumber
    stableStatus: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCompoundDeposited: BigNumber
      totalNormalDeposited: BigNumber
      totalNormalBorrowed: BigNumber
      assetScaler: BigNumber
      assetGrowth: BigNumber
      debtGrowth: BigNumber
    }
    underlyingStatus: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalCompoundDeposited: BigNumber
      totalNormalDeposited: BigNumber
      totalNormalBorrowed: BigNumber
      assetScaler: BigNumber
      assetGrowth: BigNumber
      debtGrowth: BigNumber
    }
    interestRateStable: BigNumber
    interestRateUnderlying: BigNumber
  }
>

export class ApplyInterestLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ApplyInterestLibInterface

  functions: {}

  callStatic: {}

  filters: {
    'InterestGrowthUpdated(uint256,tuple,tuple,uint256,uint256)'(
      pairId?: null,
      stableStatus?: null,
      underlyingStatus?: null,
      interestRateStable?: null,
      interestRateUnderlying?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ],
      {
        pairId: BigNumber
        stableStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        underlyingStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        interestRateStable: BigNumber
        interestRateUnderlying: BigNumber
      }
    >

    InterestGrowthUpdated(
      pairId?: null,
      stableStatus?: null,
      underlyingStatus?: null,
      interestRateStable?: null,
      interestRateUnderlying?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        },
        BigNumber,
        BigNumber
      ],
      {
        pairId: BigNumber
        stableStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        underlyingStatus: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalCompoundDeposited: BigNumber
          totalNormalDeposited: BigNumber
          totalNormalBorrowed: BigNumber
          assetScaler: BigNumber
          assetGrowth: BigNumber
          debtGrowth: BigNumber
        }
        interestRateStable: BigNumber
        interestRateUnderlying: BigNumber
      }
    >
  }

  estimateGas: {}

  populateTransaction: {}
}
